version: '3.7'

  miniflux:
    container_name: 'miniflux'
    image: 'miniflux/miniflux'
    restart: always
    depends_on:
      - pg
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@pg/miniflux?sslmode=disable
      - POLLING_FREQUENCY=10
      - RUN_MIGRATIONS=${MINIFLUX_INIT}
      - CREATE_ADMIN=${MINIFLUX_INIT}
      - ADMIN_USERNAME=${MINIFLUX_ADMIN}
      - ADMIN_PASSWORD=${MINIFLUX_ADMIN_PASSWORD}
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.miniflux.entrypoints=websecure'
      - 'traefik.http.routers.miniflux.middlewares=redirect@file'
      - 'traefik.http.routers.miniflux.rule=Host(`rss.${HOST}`)'
      - 'traefik.http.routers.miniflux.tls.certresolver=mytlschallenge'
      - 'traefik.http.routers.miniflux.tls=true'
    networks:
      - web
      - backend

  wallabag:
    container_name: wallabag
    image: wallabag/wallabag
    restart: always
    depends_on:
      - pg
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - SYMFONY__ENV__SECRET=${WALLABAG_ENV_SECRET}
      - SYMFONY__ENV__DATABASE_DRIVER=pdo_pgsql
      - SYMFONY__ENV__DATABASE_DRIVER_CLASS=Wallabag\CoreBundle\Doctrine\DBAL\Driver\CustomPostgreSQLDriver
      - SYMFONY__ENV__DATABASE_HOST=pg
      - SYMFONY__ENV__DATABASE_PORT=5432
      - SYMFONY__ENV__DATABASE_NAME=wallabag
      - SYMFONY__ENV__DATABASE_USER=${WALLABAG_DB_USER}
      - SYMFONY__ENV__DATABASE_PASSWORD=${WALLABAG_DB_PASSWORD}
      - SYMFONY__ENV__DOMAIN_NAME=https://later.${HOST}
    volumes:
      - ./data/wallabag_images:/var/www/wallabag/web/assets/images
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.wallabag.entrypoints=websecure'
      - 'traefik.http.routers.wallabag.middlewares=redirect@file'
      - 'traefik.http.routers.wallabag.rule=Host(`later.${HOST}`)'
      - 'traefik.http.routers.wallabag.tls.certresolver=mytlschallenge'
      - 'traefik.http.routers.wallabag.tls=true'
    networks:
      - backend
      - web

  pg:
    container_name: 'postrgres'
    image: 'postgres:12-alpine'
    restart: always
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - 'pg_data:/var/lib/postgresql/data'
      # - './data/postgres/:/var/lib/postgresql/data'
    networks:
      - backend

  pgbackups:
    container_name: 'pgbackups'
    image: 'prodrigestivill/postgres-backup-local:12-alpine'
    restart: always
    volumes:
      - './data/pg_backups:/backups'
    links:
      - pg
    depends_on:
      - pg
    environment:
      - POSTGRES_HOST=pg
      - POSTGRES_DB=${POSTGRES_DB},wallabag,miniflux
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      #  - POSTGRES_PASSWORD_FILE=/run/secrets/db_password <-- alternative for POSTGRES_PASSWORD (to use with docker secrets)
      - POSTGRES_EXTRA_OPTS=-Z9 --schema=public --blobs
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=80
    networks:
      - backend

volumes:
  pg_data:
  wallabag_images:

networks:
  web:
    external: true
  backend:
    external: false
